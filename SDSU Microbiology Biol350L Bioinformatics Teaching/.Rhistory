knitr::opts_chunk$set(echo = TRUE)
#read.csv() is a function
raw_rna_seq_data = read.csv("dataset1.csv")
#printing the entire matrix would take up far too much space
#raw_rna_seq_data
#functions head() and tail() can show the top and bottom of the data:
head(raw_rna_seq_data)
tail(raw_rna_seq_data)
#Extracts all of the gene names and assigns them to a variable called "row_names"
row_names = raw_rna_seq_data$Gene_name
head(row_names)
#Creates a new data frame, only including experimental groups and their respective counts
final_count_data = raw_rna_seq_data[2:5]
#Assigns the values from the first columnn of the raw count matrix to the row names of the final count matrix
row.names(final_count_data) = row_names
colnames(raw_rna_seq_data[2:5])
#There are two 2 conditions (Control and Treatment) with 4 samples, at 2 biological replicates each
#Biological replicates belong to the same condition
condition_info = data.frame(Condition = c("Control", "Control", "Treatment", "Treatment"))
condition_info
#Assigns the column names of the count matrix as the row names for each sample
row.names(condition_info) = colnames(raw_rna_seq_data[2:5])
condition_info
#Checks to see that "Condition" in "condition_info" only has two "levels" (Control and Treated)
levels(condition_info$Condition)
#Be default, R will not recognize that you are trying to cluster the biological replicates together.
#The entries in "Condition" within condition_info are "characters" - they are just a string of charcters with no symolic meaning
#as.factor() function groups the entries together into "levels" (Control and treatment)
condition_info$Condition = as.factor(condition_info$Condition)
condition_info
#Re-checks to make sure there are only two unique levels within "Condition"
levels(condition_info$Condition)
#Every package needs to be loaded manually into R with the library() function
library(DESeq2)
install.packages("deseq2")
